<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>pl.smarttesting</groupId>
	<artifactId>00-bik-service-spring</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>00-bik-service-spring</name>
	<description>BIK Service with Spring configuration</description>

	<properties>
		<java.version>17</java.version>
		<testcontainers.version>1.18.3</testcontainers.version>
		<mongock.version>5.3.3</mongock.version>
		<spring-cloud.version>2022.0.4</spring-cloud.version>
		<spring-restdocs.version>3.0.0</spring-restdocs.version>
		<spring-cloud-contract.version>4.0.4</spring-cloud-contract.version>
		<maven-surefire-plugin.excludedGroups>chaos,e2e,performance</maven-surefire-plugin.excludedGroups>
	</properties>

	<dependencies>
		<dependency>
			<groupId>pl.smarttesting</groupId>
			<artifactId>00-bik-service-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.cache</groupId>
			<artifactId>cache-api</artifactId>
		</dependency>
		<dependency>
			<groupId>io.mongock</groupId>
			<artifactId>mongock-springboot-v3</artifactId>
			<version>${mongock.version}</version>
		</dependency>
		<dependency>
			<groupId>io.mongock</groupId>
			<artifactId>mongodb-springdata-v4-driver</artifactId>
			<version>${mongock.version}</version>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-brave</artifactId>
		</dependency>
		<dependency>
			<groupId>io.zipkin.reporter2</groupId>
			<artifactId>zipkin-reporter-brave</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>
		<dependency>
			<groupId>io.zipkin.brave</groupId>
			<artifactId>brave-instrumentation-p6spy</artifactId>
		</dependency>
		<!--  Dotyczy lekcji 05-04 -->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>chaos-monkey-spring-boot</artifactId>
			<version>3.0.2</version>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mongodb</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>rabbitmq</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Dotyczy lekcji 03-05 -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>jdbc</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Dotyczy lekcji 08-03 -->
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<version>${spring-restdocs.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Dotyczy lekcji 08-03 jako ciekawostka -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Dotyczy lekcji 05-03 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-verifier</artifactId>
			<scope>test</scope>
		</dependency>
		<!--  Dotyczy lekcji 05-02 -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5</artifactId>
			<version>1.1.0</version>
			<scope>test</scope>
		</dependency>
		<!--  Dotyczy lekcji 05-04 -->
		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<image>
						<name>smarttesting/bik-service</name>
					</image>
				</configuration>
				<executions>
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build-image</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>17</source>
					<target>17</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludedGroups>${maven-surefire-plugin.excludedGroups}</excludedGroups>
				</configuration>
			</plugin>

			<!-- Dotyczy lekcji 05-03 -->
			<plugin>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-contract-maven-plugin</artifactId>
				<version>${spring-cloud-contract.version}</version>
				<extensions>true</extensions>
				<configuration>
					<baseClassForTests>pl.smarttesting.bik.score.infrastructure.BikContractBaseClass</baseClassForTests>
					<baseClassMappings>
						<baseClassMapping>
							<contractPackageRegex>.*analysis.*</contractPackageRegex>
							<baseClassFQN>pl.smarttesting.bik.score.analysis.AnalysisMessagingBaseClass</baseClassFQN>
						</baseClassMapping>
					</baseClassMappings>
				</configuration>
			</plugin>

			<!-- Dotyczy lekcji 08-03 -->
			<!-- Konfiguracja REST Docs i Asciidoctor -->
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>${spring-restdocs.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!--  Dotyczy lekcji 06-03 o sonarze -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.10</version>
				<executions>
						<execution>
								<goals>
										<goal>prepare-agent</goal>
								</goals>
						</execution>
						<execution>
								<id>report</id>
								<phase>prepare-package</phase>
								<goals>
										<goal>report</goal>
								</goals>
						</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
	<!--  Dotyczy lekcji o sonarze -->
	<profiles>
		<profile>
			<id>all</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<maven-surefire-plugin.excludedGroups/>
			</properties>
		</profile>
		<profile>
			<id>chaos</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<maven-surefire-plugin.excludedGroups/>
				<groups>chaos</groups>
			</properties>
		</profile>
		<profile>
				<id>sonar</id>
				<activation>
						<activeByDefault>false</activeByDefault>
				</activation>
				<build>
						<plugins>
								<plugin>
										<groupId>org.sonarsource.scanner.maven</groupId>
										<artifactId>sonar-maven-plugin</artifactId>
										<version>3.9.0.2155</version>
										<executions>
												<execution>
														<id>sonar</id>
														<phase>post-integration-test</phase>
														<goals>
																<goal>sonar</goal>
														</goals>
												</execution>
										</executions>
								</plugin>
						</plugins>
				</build>
		</profile>
	</profiles>

</project>
