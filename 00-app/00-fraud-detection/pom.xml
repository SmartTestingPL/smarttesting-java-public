<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>pl.smarttesting</groupId>
	<artifactId>00-fraud-detection</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>00-fraud-detection</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>17</java.version>
		<testcontainers.version>1.18.3</testcontainers.version>
		<spring-cloud.version>2022.0.4</spring-cloud.version>
		<spring-cloud-contract.version>4.0.4</spring-cloud-contract.version>
		<spring-restdocs.version>3.0.0</spring-restdocs.version>
		<pitest-maven.version>1.7.3</pitest-maven.version>
		<maven-surefire-plugin.excludedGroups>chaos,e2e,performance
		</maven-surefire-plugin.excludedGroups>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.14</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-commons</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-brave</artifactId>
		</dependency>
		<dependency>
			<groupId>io.zipkin.reporter2</groupId>
			<artifactId>zipkin-reporter-brave</artifactId>
		</dependency>
		<dependency>
			<groupId>io.zipkin.brave</groupId>
			<artifactId>brave-instrumentation-p6spy</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-core</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<!--  Dotyczy lekcji 05-04 -->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>chaos-monkey-spring-boot</artifactId>
			<version>3.0.2</version>
		</dependency>
		<!--  Dotyczy lekcji 05-04 -->
		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>rabbitmq</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-verifier</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
			<scope>test</scope>
		</dependency>
		<!--  Dotyczy lekcji 05-02 -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5</artifactId>
			<version>1.1.0</version>
			<scope>test</scope>
		</dependency>
		<!-- Dotyczy lekcji 08-03 -->
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<version>${spring-restdocs.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<image>
						<name>smarttesting/fraud-detection</name>
					</image>
				</configuration>
				<executions>
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build-image</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>17</source>
					<target>17</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludedGroups>${maven-surefire-plugin.excludedGroups}
					</excludedGroups>
				</configuration>
			</plugin>
			<!-- Dotyczy lekcji 05-03 -->
			<plugin>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-contract-maven-plugin</artifactId>
				<version>${spring-cloud-contract.version}</version>
				<extensions>true</extensions>
				<configuration>
					<baseClassMappings>
						<baseClassMapping>
							<contractPackageRegex>.*http.*</contractPackageRegex>
							<baseClassFQN>pl.smarttesting.verifier.FraudControllerBase
							</baseClassFQN>
						</baseClassMapping>
						<baseClassMapping>
							<contractPackageRegex>.*messaging.*</contractPackageRegex>
							<baseClassFQN>pl.smarttesting.verifier.MessagingBase
							</baseClassFQN>
						</baseClassMapping>
					</baseClassMappings>
				</configuration>
			</plugin>

			<!-- Dotyczy lekcji 08-03 -->
			<!-- Konfiguracja REST Docs i Asciidoctor -->
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>${spring-restdocs.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!--  Dotyczy lekcji 06-03 o sonarze -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.10</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!--  Dotyczy lekcji o sonarze -->
	<profiles>
		<profile>
			<id>all</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<maven-surefire-plugin.excludedGroups/>
			</properties>
		</profile>
		<profile>
			<id>e2e</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<maven-surefire-plugin.excludedGroups/>
				<groups>e2e</groups>
			</properties>
		</profile>
		<profile>
			<id>chaos</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<maven-surefire-plugin.excludedGroups/>
				<groups>chaos</groups>
			</properties>
		</profile>
		<profile>
			<id>mutation</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<!--Dotyczy lekcji 08-04 -->
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<version>${pitest-maven.version}</version>
						<configuration>
							<threads>4</threads>
							<targetClasses>
								<param>pl.smarttesting.verifier.verification.*</param>
							</targetClasses>
						</configuration>
						<executions>
							<execution>
								<id>mutationCoverage</id>
								<goals>
									<goal>mutationCoverage</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.pitest</groupId>
								<artifactId>pitest-junit5-plugin</artifactId>
								<version>0.14</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>sonar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
						<version>3.9.0.2155</version>
						<executions>
							<execution>
								<id>sonar</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>sonar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>jmeter</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<version>${pitest-maven.version}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.0.0</version>
						<groupId>org.codehaus.mojo</groupId>
						<executions>
							<execution>
								<id>Stop App Containers Before Tests</id>
								<phase>pre-integration-test</phase>
								<configuration>
									<workingDirectory>
										${project.basedir}/src/test/resources/docker
									</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-e2e.yml kill
									</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>Run Infra Containers</id>
								<phase>pre-integration-test</phase>
								<configuration>
									<workingDirectory>
										${project.basedir}/src/test/resources/docker
									</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-e2e.yml up --detach
										postgres rabbitmq mongo
										income-wiremock monthly-cost-wiremock
										personal-wiremock social-wiremock zipkin
									</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>wait-for-postgresql-to-start</id>
								<phase>pre-integration-test</phase>
								<configuration>
									<workingDirectory>
										${project.basedir}/src/test/resources/docker
									</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-e2e.yml up
										wait-for-postgres
									</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>Run App Containers</id>
								<phase>integration-test</phase>
								<configuration>
									<workingDirectory>
										${project.basedir}/src/test/resources/docker
									</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-e2e.yml up --detach
										bik-service fraud-detection
									</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<id>Stop App Containers</id>
								<phase>post-integration-test</phase>
								<configuration>
									<workingDirectory>
										${project.basedir}/src/test/resources/docker
									</workingDirectory>
									<executable>docker-compose</executable>
									<commandlineArgs>-f docker-compose-e2e.yml kill
									</commandlineArgs>
								</configuration>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>se.thinkcode.wait</groupId>
						<artifactId>http</artifactId>
						<version>1.2.0</version>
						<executions>
							<execution>
								<id>wait-for-zipkin-to-start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>wait</goal>
								</goals>
								<configuration>
									<url>http://localhost:9411/zipkin</url>
									<timeout>10000</timeout>
								</configuration>
							</execution>
							<execution>
								<id>wait-for-rabbit-to-start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>wait</goal>
								</goals>
								<configuration>
									<url>http://localhost:15672/</url>
									<timeout>10000</timeout>
								</configuration>
							</execution>
							<execution>
								<id>wait-for-bik-to-start</id>
								<phase>integration-test</phase>
								<goals>
									<goal>wait</goal>
								</goals>
								<configuration>
									<url>http://localhost:7654/actuator/health</url>
									<timeout>15000</timeout>
								</configuration>
							</execution>
							<execution>
								<id>wait-for-fraud-to-start</id>
								<phase>integration-test</phase>
								<goals>
									<goal>wait</goal>
								</goals>
								<configuration>
									<url>http://localhost:8765/actuator/health</url>
									<timeout>15000</timeout>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.lazerycode.jmeter</groupId>
						<artifactId>jmeter-maven-plugin</artifactId>
						<version>3.5.0</version>
						<executions>
							<!-- Generate JMeter configuration -->
							<execution>
								<id>configuration</id>
								<goals>
									<goal>configure</goal>
								</goals>
							</execution>
							<!-- Run JMeter tests -->
							<execution>
								<id>jmeter-tests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>jmeter</goal>
								</goals>
							</execution>
							<execution>
								<id>jmeter-check-results</id>
								<goals>
									<goal>results</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<ignoreResultFailures>true</ignoreResultFailures>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
